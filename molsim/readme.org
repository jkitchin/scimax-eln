#+title: scimax-ELN for molecular simulation



#+attr_org: :width 800
[[./screenshots/date-11-06-2024-time-20-18-42.png]]


Goal: Use ase to compute the lattice constant of Cu.

#+BEGIN_SRC jupyter-python
from ase.build import bulk
from ase.calculators.emt import EMT

atoms = bulk('Cu', a=3.6)
atoms.calc = EMT()

atoms.get_potential_energy()
#+END_SRC

#+RESULTS:
: -0.006688768685794599


#+BEGIN_SRC jupyter-python  
from pycse.hashcache import SqlCache

SqlCache.dump(atoms=atoms)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[11], line 3
      1 from pycse.hashcache import SqlCache
----> 3 SqlCache.dump(atoms=atoms)

File ~/Dropbox/python/pycse/pycse/hashcache.py:358, in SqlCache.dump(**kwargs)
    356 hc = SqlCache(lambda x: x)
    357 try:
--> 358     hc.dump_data(hsh, data)
    359     return hsh
    360 except sqlite3.IntegrityError:

File ~/Dropbox/python/pycse/pycse/hashcache.py:299, in SqlCache.dump_data(self, hsh, data)
    294 def dump_data(self, hsh, data):
    295     """Dump DATA into HSH.
    296     DATA must be serializable to json.
    297 
    298     """
--> 299     value = orjson.dumps(data, option=orjson.OPT_SERIALIZE_NUMPY)
    300     with self.con:
    301         self.con.execute("INSERT INTO cache(hash, value) VALUES(?, ?)", (hsh, value))

TypeError: Type is not JSON serializable: Atoms
#+end_example
:END:

*************** TODO extend SqlCache with custom serializing functions
*************** END

#+BEGIN_SRC jupyter-python
from pycse.hashcache import HashCache

HashCache.dump(atoms=atoms)
#+END_SRC

#+RESULTS:
: 4130737e96a89b0d0315bd328303e298

#+BEGIN_SRC jupyter-python  
HashCache.load('4130737e96a89b0d0315bd328303e298')['atoms'].get_potential_energy()
#+END_SRC

#+RESULTS:
: -0.006688768685794599

* Work out how to run a bunch of volumes


#+BEGIN_SRC jupyter-python
@HashCache
def get_energy(symbol, a):
    """symbol is a string for a chemical element, for a metal EMT can use
    a is a float lattice constant
    """
    atoms = bulk(symbol, a=a)
    atoms.calc = EMT()
    return atoms, atoms.get_potential_energy()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python  
get_energy('Cu', 3.6)
#+END_SRC

#+RESULTS:
| Atoms | (symbols= Cu pbc=True cell= ((0.0 1.8 1.8) (1.8 0.0 1.8) (1.8 1.8 0.0)) calculator=EMT (...)) | -0.006688768685794599 |


#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.linspace(3.5, 3.7, 10)
results = [get_energy('Cu', a) for a in A]
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python  
import matplotlib.pyplot as plt
volumes = [x[0].get_volume() for x in results]
energies = [x[1] for x in results]

plt.plot(volumes, energies, 'bo')
plt.xlabel('Volume')
plt.ylabel('energy (eV)')
#+END_SRC

#+RESULTS:
:RESULTS:
: Text(0, 0.5, 'energy (eV)')
[[file:./.ob-jupyter/d576a7a4d6c11f873bafd115bf8ae9cca310f210.png]]
:END:

#+BEGIN_SRC jupyter-python
from ase.eos import EquationOfState

eos = EquationOfState(volumes, energies, eos='murnaghan')
v0, e0, B = eos.fit()
p = eos.plot();
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/e0b1e5bff43b597864673aa5e4a101cc694701cf.png]]

#+BEGIN_SRC jupyter-python  
HashCache.dump(p=p, energies=energies, volumes=volumes)
#+END_SRC

#+RESULTS:
: 3513cf5f94b19b0b7d8366977162b793


#+BEGIN_SRC jupyter-python  :restart
from pycse.hashcache import HashCache
import matplotlib.pyplot as plt

data = HashCache.load('3513cf5f94b19b0b7d8366977162b793')
data
#+END_SRC

#+RESULTS:
| p | : | <Axes: | title= | (center : murnaghan: E: -0.007 eV, V: 11.565 Å$^3$, B: 133.983 GPa) | xlabel= | volume [Å$^3$] | ylabel= | energy [eV] | > | energies | : | (0.02258449020150266 0.009418803494646966 0.00023387132042529402 -0.0051803267047105805 -0.007033515329636586 -0.005529646375938668 -0.0008644538297684079 0.00677597166295385 0.017216683862587345 0.03029607714894489) | volumes | : | (10.71875 10.924215706447187 11.132290466392321 11.342990740740742 11.556332990397806 11.772333676268865 11.991009259259261 12.212376200274347 12.436450960219478 12.663250000000003) |

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
fig = plt.figure()
fig.axes.append(data['p'])
fig.show()
#+END_SRC

#+RESULTS:
:RESULTS:
: /var/folders/3q/ht_2mtk52hl7ydxrcr87z2gr0000gn/T/ipykernel_69640/3635145725.py:4: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.
:   fig.show()
: <Figure size 640x480 with 0 Axes>
:END:


#+BEGIN_SRC jupyter-python
dir(data['p'])
#+END_SRC

#+BEGIN_SRC jupyter-python
plt.plot(data['volumes'], data['energies']);
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/8a6a9cd51a7aa7aaf3ca0d7a1198adc77f9380c9.png]]

*************** TODO look up if there is a way to reload the figure from the cache
*************** END

#+BEGIN_SRC jupyter-python  
HashCache.dump(fig=plt.gcf())
#+END_SRC

#+RESULTS:
:RESULTS:
: 69b4355557538be9e54d4c4f328dd76e
: <Figure size 640x480 with 0 Axes>
:END:


#+BEGIN_SRC jupyter-python  
d = HashCache.load('69b4355557538be9e54d4c4f328dd76e')
d['fig'].savefig('test.png')
#+END_SRC

#+RESULTS:

[[./test.png]]

#+BEGIN_SRC jupyter-python  
dir(d['fig'])
#+END_SRC

#+RESULTS:
| _PROPERTIES_EXCLUDED_FROM_SET | __class__ | __delattr__ | __dict__ | __dir__ | __doc__ | __eq__ | __format__ | __ge__ | __getattribute__ | __getstate__ | __gt__ | __hash__ | __init__ | __init_subclass__ | __le__ | __lt__ | __module__ | __ne__ | __new__ | __reduce__ | __reduce_ex__ | __repr__ | __setattr__ | __setstate__ | __sizeof__ | __str__ | __subclasshook__ | __weakref__ | _add_axes_internal | _agg_filter | _align_label_groups | _alpha | _animated | _axobservers | _axstack | _button_pick_id | _callbacks | _canvas_callbacks | _check_layout_engines_compat | _clipon | _clippath | _cm_set | _default_contains | _dpi | _fig_callbacks | _fully_clipped_to_axes | _gci | _get_dpi | _get_draw_artists | _get_renderer | _gid | _in_layout | _internal_update | _label | _layout_engine | _localaxes | _mouse_key_ids | _mouseover | _norm_per_subplot_kw | _normalize_grid_string | _original_dpi | _path_effects | _picker | _process_projection_requirements | _rasterized | _remove_method | _repr_html_ | _scroll_pick_id | _set_alpha_for_array | _set_artist_props | _set_dpi | _set_gc_clip | _sketch | _snap | _stale | _sticky_edges | _suplabels | _suptitle | _supxlabel | _supylabel | _transform | _transformSet | _update_props | _update_set_signature_and_docstring | _url | _visible | add_artist | add_axes | add_axobserver | add_callback | add_gridspec | add_subfigure | add_subplot | align_labels | align_xlabels | align_ylabels | artists | autofmt_xdate | axes | bbox | bbox_inches | callbacks | canvas | clear | clf | clipbox | colorbar | contains | convert_xunits | convert_yunits | delaxes | dpi | dpi_scale_trans | draw | draw_artist | draw_without_rendering | execute_constrained_layout | figbbox | figimage | figure | findobj | format_cursor_data | frameon | gca | get_agg_filter | get_alpha | get_animated | get_axes | get_children | get_clip_box | get_clip_on | get_clip_path | get_constrained_layout | get_constrained_layout_pads | get_cursor_data | get_default_bbox_extra_artists | get_dpi | get_edgecolor | get_facecolor | get_figheight | get_figure | get_figwidth | get_frameon | get_gid | get_in_layout | get_label | get_layout_engine | get_linewidth | get_mouseover | get_path_effects | get_picker | get_rasterized | get_size_inches | get_sketch_params | get_snap | get_tight_layout | get_tightbbox | get_transform | get_transformed_clip_path_and_affine | get_url | get_visible | get_window_extent | get_zorder | ginput | have_units | images | is_transform_set | legend | legends | lines | mouseover | number | patch | patches | pchanged | pick | pickable | properties | remove | remove_callback | savefig | sca | set | set_agg_filter | set_alpha | set_animated | set_canvas | set_clip_box | set_clip_on | set_clip_path | set_constrained_layout | set_constrained_layout_pads | set_dpi | set_edgecolor | set_facecolor | set_figheight | set_figure | set_figwidth | set_frameon | set_gid | set_in_layout | set_label | set_layout_engine | set_linewidth | set_mouseover | set_path_effects | set_picker | set_rasterized | set_size_inches | set_sketch_params | set_snap | set_tight_layout | set_transform | set_url | set_visible | set_zorder | show | stale | stale_callback | sticky_edges | subfigs | subfigures | subplot_mosaic | subplotpars | subplots | subplots_adjust | suppressComposite | suptitle | supxlabel | supylabel | text | texts | tight_layout | transFigure | transSubfigure | update | update_from | waitforbuttonpress | zorder |


#+BEGIN_SRC jupyter-python  
d['fig'].get_axes()
#+END_SRC

#+RESULTS:



* automating the pipeline

#+BEGIN_SRC jupyter-python 
from pycse.hashcache import HashCache
from ase.build import bulk
from ase.calculators.emt import EMT
import numpy as np

@HashCache
def get_volumes_energies(symbol, n=10, lf=0.9, uf=1.1):
    '''symbol: chemical element
    n number of points in eos
    lf, lower fraction
    uf, upper fraction
    '''
    a0 = bulk(symbol)
    v0 = a0.get_volume()

    # V = 1/4 a**3
    lc0 = (4 * v0)**(1/3)

    A = np.linspace(lf * lc0, uf * lc0, n)

    ATOMS = [bulk(symbol, a=a) for a in A]
    for atoms in ATOMS:
        atoms.calc = EMT() 

    volumes = [atoms.get_volume() for atoms in ATOMS]
    energies = [atoms.get_potential_energy() for atoms in ATOMS]

    return (volumes, energies)

V, E = get_volumes_energies('Cu')
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python  
from ase.eos import EquationOfState
eos0 = EquationOfState(*get_volumes_energies('Cu'))
eos0.fit()
#+END_SRC

#+RESULTS:
| 11.557467667402593 | -0.00628660155399885 | 0.8254236101052489 |

#+BEGIN_SRC jupyter-python
eos1 = EquationOfState(*get_volumes_energies('Pd'))
eos1.fit()
#+END_SRC

#+RESULTS:
| 14.58663870401962 | -0.0006520550559514504 | 1.1270538919306885 |

#+BEGIN_SRC jupyter-python  
eos2 = EquationOfState(*get_volumes_energies('Au'))
eos2.fit()
#+END_SRC

#+RESULTS:
| 16.68342392210876 | -0.0008834936632524659 | 1.0935567477567227 |


#+BEGIN_SRC jupyter-python  
a0 = eos0.plot()
eos1.plot(ax=a0)
eos2.plot(ax=a0);
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/51ca57fb7d0f90b189928d067a685dfdab44bed9.png]]


#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt

for sym in ['Cu', 'Pd', 'Au']:
    plt.plot(*get_volumes_energies(sym), label=sym)
plt.xlabel('V')
plt.ylabel('E')
plt.legend();    
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/eec56b93f2809b313b8d9765cca191a7fccb636e.png]]

#+BEGIN_SRC jupyter-python  
HashCache.dump(Cu=get_volumes_energies('Cu'),
               Pd=get_volumes_energies('Pd'),
               Au=get_volumes_energies('Au'))
#+END_SRC

#+RESULTS:
: a1cb8cb213c239d6ca6a70bc3daf9e55

#+BEGIN_SRC jupyter-python
data = HashCache.load('a1cb8cb213c239d6ca6a70bc3daf9e55')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
from ase.eos import EquationOfState

table = []
syms = ['Cu', 'Pd', 'Au']
for sym in syms:
    v, e = data[sym]
    eos = EquationOfState(v, e)
    V0, E0, _ = eos.fit()
    table += [[sym, np.round(V0, 2), np.round(E0, 5)]]

table    
#+END_SRC

#+RESULTS:
| Cu | 11.56 | -0.00629 |
| Pd | 14.59 | -0.00065 |
| Au | 16.68 | -0.00088 |

#+name: tab_eos
#+BEGIN_SRC jupyter-python  
from pycse.orgmode import Table

Table(table, headers=['symbol', 'V0', 'E0'],
      caption='Equation of state data',
      name='tab:eos')
#+END_SRC

#+RESULTS: tab_eos
#+name: tab:eos
#+caption: Equation of state data
| symbol |    V0 |       E0 |
|--------+-------+----------|
| Cu     | 11.56 | -0.00629 |
| Pd     | 14.59 | -0.00065 |
| Au     | 16.68 | -0.00088 |

#+RESULTS: tab:eos
#+name: tab:eos
#+caption: Equation of state data
| symbol |    V0 |       E0 |
|--------+-------+----------|
| Cu     | 11.56 | -0.00629 |
| Pd     | 14.59 | -0.00065 |
| Au     | 16.68 | -0.00088 |

#+RESULTS:
#+name: tab:eos
#+caption: Equation of state data
| symbol |    V0 |       E0 |
|--------+-------+----------|
| Cu     | 11.56 | -0.00629 |
| Pd     | 14.59 | -0.00065 |
| Au     | 16.68 | -0.00088 |

