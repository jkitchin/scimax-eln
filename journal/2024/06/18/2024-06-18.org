* Using SqlCache



#+attr_org: :width 800
[[./screenshots/date-18-06-2024-time-20-24-46.png]]

#+BEGIN_SRC jupyter-python
from pycse.hashcache import SqlCache

@SqlCache
def f(x):
    return x

f(1), f([2, 3]), f('tree')
#+END_SRC

#+RESULTS:
| 1 | (2 3) | tree |


#+BEGIN_SRC sh
sqlite3 cache.sqlite "select * from cache"
#+END_SRC

#+RESULTS:
| 386639e89a59e0453979ee081fc357912dfb68e2 | {"output":1      | hash:"386639e89a59e0453979ee081fc357912dfb68e2" | func:"f"                                        | module:"__main__"           | args:[1]                                  | kwargs:{}                                                                  | standardized-kwargs:{"x":1}                                                         | version:"0.1.0"  | cwd:"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18" | hostname:"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa" | user:"jkitchin" | run-at:1718756233.551786                                                   | run-at-human:"Tue Jun 18 20:17:13 2024"                                             | elapsed_time:9.5367431640625e-7} |                           |                                         |                                     |
| 4e9e4b12e0f19fdf5f13df9f7b5bdd4918314fcd | {"output":[1     | 2]                                              | hash:"4e9e4b12e0f19fdf5f13df9f7b5bdd4918314fcd" | func:"f"                    | module:"__main__"                         | args:[[1                                                                     | 2]]                                                                                   | kwargs:{}        | standardized-kwargs:{"x":[1                                                | 2]}                                                                                 | version:"0.1.0" | cwd:"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18" | hostname:"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa" | user:"jkitchin"                  | run-at:1718756237.511054  | run-at-human:"Tue Jun 18 20:17:17 2024" | elapsed_time:1.9073486328125e-6}    |
| ee687aef2cddb54a5810bde03050a01662d8b0a8 | {"output":"tree" | hash:"ee687aef2cddb54a5810bde03050a01662d8b0a8" | func:"f"                                        | module:"__main__"           | args:["tree"]                             | kwargs:{}                                                                  | standardized-kwargs:{"x":"tree"}                                                    | version:"0.1.0"  | cwd:"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18" | hostname:"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa" | user:"jkitchin" | run-at:1718756238.945122                                                   | run-at-human:"Tue Jun 18 20:17:18 2024"                                             | elapsed_time:9.5367431640625e-7} |                           |                                         |                                     |
| d87c8847c6913e1e201805ff6083e991         | {"func":"dump"   | kwargs:{"val":{"a":4}}                          | hash:"d87c8847c6913e1e201805ff6083e991"         | saved-at:1718756399.3696818 | saved-at-human:"Tue Jun 18 20:19:59 2024" | cwd:"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18" | hostname:"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa" | user:"jkitchin"} |                                                                            |                                                                                     |                 |                                                                            |                                                                                     |                                  |                           |                                         |                                     |
| 1f6fb158d26b9c02ea7dbe8413f139e99dcf9e10 | {"output":[2     | 3]                                              | hash:"1f6fb158d26b9c02ea7dbe8413f139e99dcf9e10" | func:"f"                    | module:"__main__"                         | args:[[2                                                                     | 3]]                                                                                   | kwargs:{}        | standardized-kwargs:{"x":[2                                                | 3]}                                                                                 | version:"0.1.0" | cwd:"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18" | hostname:"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa" | user:"jkitchin"                  | run-at:1718756773.6542778 | run-at-human:"Tue Jun 18 20:26:13 2024" | elapsed_time:1.1920928955078125e-6} |


#+BEGIN_SRC sh  

#+END_SRC

#+BEGIN_SRC jupyter-python  
@SqlCache
def g(x):
    return 2 * x

g(1), g([2, 3])
#+END_SRC

#+RESULTS:
| 2 | (2 3 2 3) |


#+BEGIN_SRC jupyter-python  
g(1), g([2, 3])
#+END_SRC

#+RESULTS:
| 2 | (2 3 2 3) |

#+BEGIN_SRC python :results output
import sqlite3

con = sqlite3.connect('cache.sqlite')
cur = con.execute("select * from cache where json_extract(value, '$.func')=\"g\"")

print(cur.fetchall())
#+END_SRC

#+RESULTS:
: [('02db99e99ac11a07e1227356d3f8fdc46f1937a2', b'{"output":2,"hash":"02db99e99ac11a07e1227356d3f8fdc46f1937a2","func":"g","module":"__main__","args":[1],"kwargs":{},"standardized-kwargs":{"x":1},"version":"0.1.0","cwd":"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18","hostname":"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa","user":"jkitchin","run-at":1718756883.724303,"run-at-human":"Tue Jun 18 20:28:03 2024","elapsed_time":9.5367431640625e-7}'), ('e101a7c1bd0692082392085abc0476b72053d914', b'{"output":[2,3,2,3],"hash":"e101a7c1bd0692082392085abc0476b72053d914","func":"g","module":"__main__","args":[[2,3]],"kwargs":{},"standardized-kwargs":{"x":[2,3]},"version":"0.1.0","cwd":"/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/journal/2024/06/18","hostname":"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa","user":"jkitchin","run-at":1718756883.735728,"run-at-human":"Tue Jun 18 20:28:03 2024","elapsed_time":9.5367431640625e-7}')]

#+BEGIN_SRC jupyter-python
def ode(x, y):
    return -y

from scipy.integrate import solve_ivp

sol = solve_ivp(ode, (0, 1), (1, ))
sol
#+END_SRC

#+RESULTS:
#+begin_example
  message: The solver successfully reached the end of the integration interval.
  success: True
   status: 0
        t: [ 0.000e+00  1.000e-01  1.000e+00]
        y: [[ 1.000e+00  9.048e-01  3.681e-01]]
      sol: None
 t_events: None
 y_events: None
     nfev: 14
     njev: 0
      nlu: 0
#+end_example

#+BEGIN_SRC jupyter-python  
SqlCache.dump(sol=sol)
#+END_SRC

#+RESULTS:
: 3c823d3126aba383ba4fe004cb44a212


#+BEGIN_SRC jupyter-python  
import matplotlib.pyplot as plt
sol_ = SqlCache.load('3c823d3126aba383ba4fe004cb44a212')['sol']
plt.plot(sol_['t'], sol_['y'][0]);
type(sol_['t'])
#+END_SRC

#+RESULTS:
:RESULTS:
: list
[[file:./.ob-jupyter/d7fe4d00266f8490f9b742caea6e9e410a64e746.png]]
:END:

** Putting this together

#+BEGIN_SRC jupyter-python
from scipy.integrate import solve_ivp
import nava

@SqlCache
def solution(k):
    '''Get solution for k.'''
    nu = 1
    Vspan = (0, 2)
    Fa0 = 1

    # define the ODE
    def ode(V, Fa, k):
        return -k * Fa / nu

    sol = solve_ivp(ode, Vspan, (Fa0,), args=(k,))
    nava.play('../../../../cash-register-fake-88639.mp3')
    return sol
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python  
K = [0.1, 0.2, 0.4]
SOL = [solution(k) for k in K]
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python  
SOL[0]
#+END_SRC

#+RESULTS:
| t | : | (0.0 0.15852100443841718 1.743731048822589 2.0) | y | : | ((1.0 0.9842728828131972 0.8399834420839267 0.8187307577762143)) | sol | : | hline | t_events | : | hline | y_events | : | hline | nfev | : | 20 | njev | : | 0 | nlu | : | 0 | status | : | 0 | message | : | The solver successfully reached the end of the integration interval. | success | : | True |


#+BEGIN_SRC jupyter-python
import numpy as np

for k, sol in zip(K, SOL):
    plt.plot(sol['t'], np.array(sol['y']).T, label=f'{k}')

plt.legend();    
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/45984de60197973971552c2149585191cf41bc4f.png]]

#+BEGIN_SRC jupyter-python
SqlCache.dump(K=K, SOL=SOL)
#+END_SRC

#+RESULTS:
: 13f1c3c92ec8126d1f6a921024991bdf

*************** TODO See if we can read the hash above from another location
Remember to specify where the cache attribute points to.
*************** END

