#+title: Scimax electronic laboratory notebook

#+attr_org: :width 800
[[./screenshots/date-13-06-2024-time-08-08-29.png]]


I plan to use this repo to explore using scimax as an electronic laboratory notebook. I will use the examples to determine the extent to which it provides FAIR [fn:1] (Findable, Accessible, Interoperable, Reusable) data, and how to balance that with usability.

Repo: https://github.com/jkitchin/scimax-eln

- Video 1 - https://www.youtube.com/watch?v=KodhYAo4xn0&t=0s
- Video 2 - joblib https://www.youtube.com/watch?v=sHiMOQkNFKQ
- Video 3 - hashcache https://youtube.com/live/d3zcfdylKOc
- Video 4 - SqlCache https://youtube.com/live/aWnYGOWWIqY
- Video 5 - molecular simulation https://youtube.com/live/eQcTubl-7kw
- Video 6 - writing reports in the notebook https://youtube.com/live/c9saatJ2o7A
- Video 7 - Interoperability and extendability https://youtube.com/live/RumU94MxqN4
- Video 8 - Searching your notebook https://youtube.com/live/C02FFd520MI
- Video 9 - Running Arduino devices https://youtube.com/live/Fn7sq8uRsGQ
- Video 10 - Electronic lab notebook with scimax - ELNs in the literature https://youtube.com/live/icPlZCF6LEw
- Video 11 - Publish your notebook to a webserver https://youtube.com/live/zIgSOiMFBWU

* ELN for simulations and experiments
** pycse

[[./pycse/readme.org]]

** Molecular simulation

[[./molsim/readme.org]]

** Circuit Playground

Talk about interoperability with software, instruments

[[./journal/2024/06/23/2024-06-23.org]]

** Arduino temperature

- show video capability with search of audio
- try image text recognition from a written note in image
- show scimax-ob-arduino
- work out how to capture data from it

[[./arduino/readme.org]]


** TODO Temperature control lab

https://apmonitor.com/pdc/index.php/Main/PurchaseLabKit

See [[./tclab/]] and [[./tclab_jupyter/]]

Notes for setup:


** TODO SDL-light - running a remote instrument

See [[./sdl-light/readme.org]]

*** TODO get SDL-Light instruments
DEADLINE: <2024-07-01 Mon>

ordered: https://mail.google.com/mail/u/0/?tab=rm&ogbl#inbox/FMfcgzQVwxGRSPSPlBmblnVHLqHkVTTj


* Publishing your ELN to GitHUB Pages

#+attr_org: :width 600
[[./screenshots/date-28-06-2024-time-10-59-08.png]]


The notebook as I use it daily is local on my computer. I do commit and push changes to GitHUB, and GitHUB does an ok job rendering org-files, but we can take it one step further. You can set up a workflow to publish your notebook as html (or pdf, or other format if you want). We will publish this notebook to html, and then push it to GitHub which will serve the html via GitHUB Pages.

I am going to keep this simple and use the main branch and put the html in a folder called docs. 


** Setup Pages on GitHUB

Then we have to visit GitHUB (https://github.com/jkitchin/scimax-eln/settings/pages) and choose the main branch and /docs folder.

** make an index.org page

We need an index.html page for GH pages. I use this to redirect to the readme file.

** Org-publish

We need a small elisp script to setup and publish  it.

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

(let* ((base-directory "/Users/jkitchin/Dropbox/emacs/projects/scimax-eln/")
       (org-export-with-broken-links t)
       (org-publish-project-alist `(("html"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat base-directory "docs")
				     :exclude "docs"
				     :recursive t
				     :publishing-function org-html-publish-to-html
				     :auto-preamble t
				     :auto-sitemap t)
				    ("pdf"
				     :base-directory ,base-directory
				     :base-extension "org"
				     :publishing-directory ,(concat base-directory "docs/pdfs")
				     :exclude "docs"
				     :recursive t
				     :publishing-function org-latex-publish-to-pdf
				     :auto-preamble t
				     :auto-sitemap t)
				    
				    ("static-html"
				     :base-directory ,base-directory
				     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|dat\\|mov\\|txt\\|svg\\|aiff"
				     :publishing-directory ,(concat base-directory "docs")
				     :exclude "docs"
				     :recursive t
				     :publishing-function org-publish-attachment)

				    ;; ... all the components ...
				    ("scimax-eln" :components ("html" "static-html" "pdf")))))

  (org-publish "scimax-eln" t))
#+END_SRC

#+RESULTS:

We can check out the local version.

#+BEGIN_SRC emacs-lisp
(browse-url "docs/index.html")
#+END_SRC

#+RESULTS:
: #<process open docs/index.html>

** Commit and publish the html pages

To publish these we go into the html directory, commit all the files and push them to GitHUB.


#+BEGIN_SRC sh
git add docs
git commit docs -m "publish"
git push
#+END_SRC

#+RESULTS:
| [main  | f0607f8] | publish  |                   |                |    |              |
| 19     | files    | changed, |               332 | insertions(+), | 87 | deletions(-) |
| create | mode     | 100644   | docs/sitemap.html |                |    |              |

After a bit you can find it at https://kitchingroup.cheme.cmu.edu/scimax-eln

** GitHUB actions

I added this after I made the video. You need a publish script (see [[./publish.el]]). Then you set up GitHUB actions (see [[./.github/workflows/publish.yml]]). This installs an Emacs, runs a publish script, and publishes the results to the docs directory.

* Footnotes

[fn:1] https://www.go-fair.org/fair-principles/ 

# Local Variables:
# eval: (sem-mode)
# End:
